<div class="container mx-auto p-4 min-h-screen bg-white">
  <div class="flex gap-6">
    <aside id="sidebar" class="hidden md:block w-64 flex-shrink-0">
      <%= render partial: 'game/sidebar' %>
    </aside>

    <!-- backdrop for mobile sidebar -->
    <div id="sidebar-backdrop" class="hidden fixed inset-0 bg-black bg-opacity-50 z-40"></div>

    <main class="flex-1">

      <div class="flex items-center justify-between">
        <div class="flex items-center gap-3">
          <!-- mobile toggle -->
          <button id="sidebar-toggle" class="md:hidden inline-flex items-center justify-center p-2 rounded bg-gray-100 hover:bg-gray-200">
            <!-- simple hamburger -->
            <span class="sr-only">Open sidebar</span>
            â˜°
          </button>

          <h1 class="text-2xl font-bold">Aetherium Ascent</h1>
        </div>

        <%= button_to "Sign Out", destroy_user_session_path, method: :delete %>
      </div>

      <div id="toast-container"></div>

      <div class="box-border m-auto h-28 w-32 p-4 
                    border-4 bg-green-500 m4">
    <h2>Your Stats</h2>
    <div id="stats">
      <p>Level: <span id="level"></span></p>
      <p>Experience: <span id="experience"></span></p>
      <p>Skill Points: <span id="skill-points"></span></p>
    </div>
  </div>

  <h2>Your Resources</h2>
  <div id="resources"></div>

  <h2>Actions</h2>
  <div id="actions"></div>

  <h2>Skills</h2>
  <div id="skills"></div>

  <h2>Inventory</h2>
  <div id="inventory"></div>

  <h2>Crafting</h2>
  <div id="crafting"></div>

  <h2>Buildings</h2>
  <div id="buildings"></div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const levelSpan = document.getElementById('level');
      const experienceSpan = document.getElementById('experience');
      const skillPointsSpan = document.getElementById('skill-points');
      const resourcesDiv = document.getElementById('resources');
      const actionsDiv = document.getElementById('actions');
      const skillsDiv = document.getElementById('skills');
      const inventoryDiv = document.getElementById('inventory');
      const craftingDiv = document.getElementById('crafting');
      const buildingsDiv = document.getElementById('buildings');
      const toastContainer = document.getElementById('toast-container');

      const showToast = (message, type = 'success') => {
        console.log('Showing toast:', message, type);
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.innerText = message;
        console.log('Toast created:', toast);
        toastContainer.appendChild(toast);
        setTimeout(() => {
          toast.classList.add('show');
        }, 100);
        setTimeout(() => {
          toast.classList.remove('show');
          setTimeout(() => {
            toast.remove();
          }, 300);
        }, 3000);
      };

      const fetchUser = () => {
        fetch('/api/v1/user', {
          headers: {
            'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
          }
        })
        .then(response => response.json())
        .then(data => {
          levelSpan.innerText = data.data.attributes.level;
          experienceSpan.innerText = data.data.attributes.experience;
          skillPointsSpan.innerText = data.data.attributes.skill_points;
        });
      };

      const fetchResources = () => {
        fetch('/api/v1/user_resources', {
          headers: {
            'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
          }
        })
        .then(response => response.json())
        .then(data => {
          resourcesDiv.innerHTML = '';
          data.data.forEach(resource => {
            const resourceDiv = document.createElement('div');
            resourceDiv.innerHTML = `<strong>${resource.attributes.name}:</strong> ${resource.attributes.amount}`;
            resourcesDiv.appendChild(resourceDiv);
          });
        });
      };

      const fetchActions = () => {
        fetch('/api/v1/actions', {
          headers: {
            'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
          }
        })
        .then(response => response.json())
        .then(data => {
          actionsDiv.innerHTML = '';
          const actions = data.included.filter(inc => inc.type === 'action');
          data.data.forEach(userAction => {
            const action = actions.find(a => a.id === userAction.relationships.action.data.id);
            const actionDiv = document.createElement('div');
            const actionButton = document.createElement('button');
            actionButton.innerText = action.attributes.name;
            actionButton.addEventListener('click', () => {
              performAction(action.id);
            });
            actionDiv.appendChild(actionButton);

            const upgradeButton = document.createElement('button');
            upgradeButton.innerText = 'Upgrade';
            upgradeButton.addEventListener('click', () => {
              upgradeAction(userAction.id);
            });
            actionDiv.appendChild(upgradeButton);

            const cooldownSpan = document.createElement('span');
            cooldownSpan.id = `cooldown-${userAction.id}`;
            cooldownSpan.className = 'cooldown-visual';
            actionDiv.appendChild(cooldownSpan);

            actionsDiv.appendChild(actionDiv);

            updateCooldown(userAction);
          });
        });
      };

      const updateCooldown = (userAction) => {
        const cooldownSpan = document.getElementById(`cooldown-${userAction.id}`);
        if (!cooldownSpan) return;

        let attributes = userAction.attributes;
        if (userAction.data && userAction.data.attributes) {
          attributes = userAction.data.attributes;
        }


        if (attributes.last_performed_at) {
          const lastPerformedAt = new Date(attributes.last_performed_at);
          const cooldown = attributes.cooldown;
          const now = new Date();
          const diff = (now - lastPerformedAt) / 1000;

          if (diff < cooldown) {
            const remaining = Math.ceil(cooldown - diff);
            cooldownSpan.innerText = ` (Cooldown: ${remaining}s)`;
            setTimeout(() => updateCooldown(userAction), 1000);
          } else {
            cooldownSpan.innerText = '';
          }
        } else {
          cooldownSpan.innerText = '';
        }
      };

      const fetchSkills = () => {
        fetch('/api/v1/skills', {
          headers: {
            'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
          }
        })
        .then(response => response.json())
        .then(data => {
          skillsDiv.innerHTML = '';
          data.data.forEach(skill => {
            const skillDiv = document.createElement('div');
            skillDiv.innerHTML = `<strong>${skill.attributes.name}</strong> (${skill.attributes.cost} SP): ${skill.attributes.description}`;
            const unlockButton = document.createElement('button');
            unlockButton.innerText = 'Unlock';
            unlockButton.addEventListener('click', () => {
              unlockSkill(skill.id);
            });
            skillDiv.appendChild(unlockButton);
            skillsDiv.appendChild(skillDiv);
          });
        });
      };

      const fetchInventory = () => {
        fetch('/api/v1/items', {
          headers: {
            'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
          }
        })
        .then(response => response.json())
        .then(data => {
          inventoryDiv.innerHTML = '';
          data.data.forEach(item => {
            const itemDiv = document.createElement('div');
            itemDiv.innerHTML = `<strong>${item.attributes.name}</strong>: ${item.attributes.description}`;
            const useButton = document.createElement('button');
            useButton.innerText = 'Use';
            useButton.addEventListener('click', () => {
              useItem(item.id);
            });
            itemDiv.appendChild(useButton);
            inventoryDiv.appendChild(itemDiv);
          });
        });
      };

      const fetchCrafting = () => {
        fetch('/api/v1/crafting', {
          headers: {
            'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
          }
        })
        .then(response => response.json())
        .then(data => {
          craftingDiv.innerHTML = '';
          const items = data.included.filter(inc => inc.type === 'item');
          data.data.forEach(recipe => {
            const item = items.find(i => i.id === recipe.relationships.item.data.id);
            const recipeDiv = document.createElement('div');
            recipeDiv.innerHTML = `<strong>${item.attributes.name}</strong>: `;
            const craftButton = document.createElement('button');
            craftButton.innerText = 'Craft';
            craftButton.addEventListener('click', () => {
              craftItem(recipe.id);
            });
            recipeDiv.appendChild(craftButton);
            craftingDiv.appendChild(recipeDiv);
          });
        });
      };

      const fetchBuildings = () => {
        fetch('/api/v1/buildings', {
          headers: {
            'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
          }
        })
        .then(response => response.json())
        .then(data => {
          buildingsDiv.innerHTML = '';
          data.data.forEach(building => {
            const buildingDiv = document.createElement('div');
            buildingDiv.innerHTML = `<strong>${building.attributes.name}</strong> (Level ${building.attributes.level}): ${building.attributes.description}`;
            const upgradeButton = document.createElement('button');
            upgradeButton.innerText = 'Upgrade';
            upgradeButton.addEventListener('click', () => {
              upgradeBuilding(building.id);
            });
            buildingDiv.appendChild(upgradeButton);
            buildingsDiv.appendChild(buildingDiv);
          });
        });
      };

      const performAction = (actionId) => {
        fetch('/api/v1/actions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
          },
          body: JSON.stringify({ action_id: actionId })
        })
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            showToast(data.error, 'error');
          } else {
            showToast(data.message);
            fetchResources();
            fetchUser();
            fetchActions();
          }
        });
      };

      const upgradeAction = (actionId) => {
        fetch(`/api/v1/actions/${actionId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            showToast(data.error, 'error');
          } else {
            showToast(data.message);
          }
        });
      };

      const unlockSkill = (skillId) => {
        fetch('/api/v1/skills', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
          },
          body: JSON.stringify({ skill_id: skillId })
        })
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            showToast(data.error, 'error');
          } else {
            showToast(data.message);
          }
        });
      };

      const useItem = (itemId) => {
        fetch(`/api/v1/items/${itemId}/use`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            showToast(data.error, 'error');
          } else {
            showToast(data.message);
            fetchInventory();
          }
        });
      };

      const craftItem = (recipeId) => {
        fetch('/api/v1/crafting', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
          },
          body: JSON.stringify({ recipe_id: recipeId })
        })
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            showToast(data.error, 'error');
          } else {
            showToast(data.message);
          }
        });
      };

      const upgradeBuilding = (buildingId) => {
        fetch(`/api/v1/buildings/${buildingId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            showToast(data.error, 'error');
          } else {
            showToast(data.message);
          }
        });
      };

      fetchUser();
      fetchResources();
      fetchActions();
      fetchSkills();
      fetchInventory();
      fetchCrafting();
      fetchBuildings();

      const cable = ActionCable.createConsumer('/cable?token=<%= JsonWebToken.encode(user_id: current_user.id) %>');

      cable.subscriptions.create('UserUpdatesChannel', {
        connected() {
          console.log('Connected to UserUpdatesChannel');
        },
        disconnected() {
          console.log('Disconnected from UserUpdatesChannel');
        },
        received(data) {
          console.log('Received data:', data);
          if (data.type === 'user_action_update') {
            updateCooldown(data.data.data);
          } else if (data.type === 'user_resource_update') {
            fetchResources();
          } else if (data.type === 'user_item_update') {
            fetchInventory();
          } else if (data.type === 'user_building_update') {
            fetchBuildings();
          } else if (data.type === 'user_skill_update') {
            fetchSkills();
          } else if (data.type === 'user_update') {
            fetchUser();
          }
        }
      });

      // Mobile sidebar toggle logic
      const sidebar = document.getElementById('sidebar');
      const sidebarToggle = document.getElementById('sidebar-toggle');
      const sidebarBackdrop = document.getElementById('sidebar-backdrop');

      const openSidebar = () => {
        if (!sidebar) return;
        sidebar.classList.remove('hidden');
        sidebar.classList.add('fixed', 'inset-y-0', 'left-0', 'z-50', 'w-64', 'bg-white', 'overflow-y-auto');
        sidebarBackdrop.classList.remove('hidden');
      };

      const closeSidebar = () => {
        if (!sidebar) return;
        sidebar.classList.add('hidden');
        sidebar.classList.remove('fixed', 'inset-y-0', 'left-0', 'z-50', 'w-64', 'bg-white', 'overflow-y-auto');
        sidebarBackdrop.classList.add('hidden');
      };

      if (sidebarToggle) sidebarToggle.addEventListener('click', openSidebar);
      if (sidebarBackdrop) sidebarBackdrop.addEventListener('click', closeSidebar);
    });
  </script>
  <script src="https://cdn.jsdelivr.net/npm/@rails/actioncable@7.0.0/app/assets/javascripts/actioncable.js"></script>
    </main>
  </div>
</div>