<h1>Aetherium Ascent</h1>

<%= button_to "Sign Out", destroy_user_session_path, method: :delete %>

<h2>Your Stats</h2>
<div id="stats">
  <p>Level: <span id="level"></span></p>
  <p>Experience: <span id="experience"></span></p>
  <p>Skill Points: <span id="skill-points"></span></p>
</div>

<h2>Your Resources</h2>
<div id="resources"></div>

<h2>Actions</h2>
<div id="actions"></div>

<h2>Skills</h2>
<div id="skills"></div>

<h2>Inventory</h2>
<div id="inventory"></div>

<h2>Crafting</h2>
<div id="crafting"></div>

<h2>Buildings</h2>
<div id="buildings"></div>

<script src="https://cdn.jsdelivr.net/npm/actioncable@7.0.0/lib/assets/compiled/action_cable.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const levelSpan = document.getElementById('level');
    const experienceSpan = document.getElementById('experience');
    const skillPointsSpan = document.getElementById('skill-points');
    const resourcesDiv = document.getElementById('resources');
    const actionsDiv = document.getElementById('actions');
    const skillsDiv = document.getElementById('skills');
    const inventoryDiv = document.getElementById('inventory');
    const craftingDiv = document.getElementById('crafting');
    const buildingsDiv = document.getElementById('buildings');

    const fetchUser = () => {
      fetch('/api/v1/user', {
        headers: {
          'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
        }
      })
      .then(response => response.json())
      .then(data => {
        levelSpan.innerText = data.data.attributes.level;
        experienceSpan.innerText = data.data.attributes.experience;
        skillPointsSpan.innerText = data.data.attributes.skill_points;
      });
    };

    const fetchResources = () => {
      fetch('/api/v1/user_resources', {
        headers: {
          'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
        }
      })
      .then(response => response.json())
      .then(data => {
        resourcesDiv.innerHTML = '';
        data.data.forEach(resource => {
          const resourceDiv = document.createElement('div');
          resourceDiv.innerHTML = `<strong>${resource.attributes.name}:</strong> ${resource.attributes.amount}`;
          resourcesDiv.appendChild(resourceDiv);
        });
      });
    };

    const fetchActions = () => {
      fetch('/api/v1/actions', {
        headers: {
          'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
        }
      })
      .then(response => response.json())
      .then(data => {
        actionsDiv.innerHTML = '';
        const actions = data.included.filter(inc => inc.type === 'action');
        data.data.forEach(userAction => {
          const action = actions.find(a => a.id === userAction.relationships.action.data.id);
          const actionDiv = document.createElement('div');
          const actionButton = document.createElement('button');
          actionButton.innerText = action.attributes.name;
          actionButton.addEventListener('click', () => {
            performAction(action.id);
          });
          actionDiv.appendChild(actionButton);

          const upgradeButton = document.createElement('button');
          upgradeButton.innerText = 'Upgrade';
          upgradeButton.addEventListener('click', () => {
            upgradeAction(userAction.id);
          });
          actionDiv.appendChild(upgradeButton);

          const cooldownSpan = document.createElement('span');
          cooldownSpan.id = `cooldown-${userAction.id}`;
          cooldownSpan.className = 'cooldown-visual';
          actionDiv.appendChild(cooldownSpan);

          actionsDiv.appendChild(actionDiv);

          updateCooldown(userAction);
        });
      });
    };

    const updateCooldown = (userAction) => {
      const cooldownSpan = document.getElementById(`cooldown-${userAction.id}`);
      if (!cooldownSpan) return;

      let attributes = userAction.attributes;
      if (userAction.data && userAction.data.attributes) {
        attributes = userAction.data.attributes;
      }


      if (attributes.last_performed_at) {
        const lastPerformedAt = new Date(attributes.last_performed_at);
        const cooldown = attributes.cooldown;
        const now = new Date();
        const diff = (now - lastPerformedAt) / 1000;

        if (diff < cooldown) {
          const remaining = Math.ceil(cooldown - diff);
          cooldownSpan.innerText = ` (Cooldown: ${remaining}s)`;
          setTimeout(() => updateCooldown(userAction), 1000);
        } else {
          cooldownSpan.innerText = '';
        }
      } else {
        cooldownSpan.innerText = '';
      }
    };

    const fetchSkills = () => {
      fetch('/api/v1/skills', {
        headers: {
          'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
        }
      })
      .then(response => response.json())
      .then(data => {
        skillsDiv.innerHTML = '';
        data.data.forEach(skill => {
          const skillDiv = document.createElement('div');
          skillDiv.innerHTML = `<strong>${skill.attributes.name}</strong> (${skill.attributes.cost} SP): ${skill.attributes.description}`;
          const unlockButton = document.createElement('button');
          unlockButton.innerText = 'Unlock';
          unlockButton.addEventListener('click', () => {
            unlockSkill(skill.id);
          });
          skillDiv.appendChild(unlockButton);
          skillsDiv.appendChild(skillDiv);
        });
      });
    };

    const fetchInventory = () => {
      fetch('/api/v1/items', {
        headers: {
          'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
        }
      })
      .then(response => response.json())
      .then(data => {
        inventoryDiv.innerHTML = '';
        data.data.forEach(item => {
          const itemDiv = document.createElement('div');
          itemDiv.innerHTML = `<strong>${item.attributes.name}</strong>: ${item.attributes.description}`;
          const useButton = document.createElement('button');
          useButton.innerText = 'Use';
          useButton.addEventListener('click', () => {
            useItem(item.id);
          });
          itemDiv.appendChild(useButton);
          inventoryDiv.appendChild(itemDiv);
        });
      });
    };

    const fetchCrafting = () => {
      fetch('/api/v1/crafting', {
        headers: {
          'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
        }
      })
      .then(response => response.json())
      .then(data => {
        craftingDiv.innerHTML = '';
        const items = data.included.filter(inc => inc.type === 'item');
        data.data.forEach(recipe => {
          const item = items.find(i => i.id === recipe.relationships.item.data.id);
          const recipeDiv = document.createElement('div');
          recipeDiv.innerHTML = `<strong>${item.attributes.name}</strong>: `;
          const craftButton = document.createElement('button');
          craftButton.innerText = 'Craft';
          craftButton.addEventListener('click', () => {
            craftItem(recipe.id);
          });
          recipeDiv.appendChild(craftButton);
          craftingDiv.appendChild(recipeDiv);
        });
      });
    };

    const fetchBuildings = () => {
      fetch('/api/v1/buildings', {
        headers: {
          'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
        }
      })
      .then(response => response.json())
      .then(data => {
        buildingsDiv.innerHTML = '';
        data.data.forEach(building => {
          const buildingDiv = document.createElement('div');
          buildingDiv.innerHTML = `<strong>${building.attributes.name}</strong> (Level ${building.attributes.level}): ${building.attributes.description}`;
          const upgradeButton = document.createElement('button');
          upgradeButton.innerText = 'Upgrade';
          upgradeButton.addEventListener('click', () => {
            upgradeBuilding(building.id);
          });
          buildingDiv.appendChild(upgradeButton);
          buildingsDiv.appendChild(buildingDiv);
        });
      });
    };

    const performAction = (actionId) => {
      fetch('/api/v1/actions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
        },
        body: JSON.stringify({ action_id: actionId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.error) {
          alert(data.error);
        } else {
          alert(data.message);
          fetchResources();
          fetchUser();
          fetchActions();
        }
      });
    };

    const upgradeAction = (actionId) => {
      fetch(`/api/v1/actions/${actionId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.error) {
          alert(data.error);
        } else {
          alert(data.message);
        }
      });
    };

    const unlockSkill = (skillId) => {
      fetch('/api/v1/skills', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
        },
        body: JSON.stringify({ skill_id: skillId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.error) {
          alert(data.error);
        } else {
          alert(data.message);
        }
      });
    };

    const useItem = (itemId) => {
      fetch(`/api/v1/items/${itemId}/use`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.error) {
          alert(data.error);
        } else {
          alert(data.message);
          fetchInventory();
        }
      });
    };

    const craftItem = (recipeId) => {
      fetch('/api/v1/crafting', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
        },
        body: JSON.stringify({ recipe_id: recipeId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.error) {
          alert(data.error);
        } else {
          alert(data.message);
        }
      });
    };

    const upgradeBuilding = (buildingId) => {
      fetch(`/api/v1/buildings/${buildingId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer <%= JsonWebToken.encode(user_id: current_user.id) %>`
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.error) {
          alert(data.error);
        } else {
          alert(data.message);
        }
      });
    };

    fetchUser();
    fetchResources();
    fetchActions();
    fetchSkills();
    fetchInventory();
    fetchCrafting();
    fetchBuildings();

    const cable = ActionCable.createConsumer('/cable?token=<%= JsonWebToken.encode(user_id: current_user.id) %>');

    cable.subscriptions.create('UserUpdatesChannel', {
      received(data) {
        if (data.type === 'user_action_update') {
          updateCooldown(data.data.data);
        } else if (data.type === 'user_resource_update') {
          fetchResources();
        } else if (data.type === 'user_item_update') {
          fetchInventory();
        } else if (data.type === 'user_building_update') {
          fetchBuildings();
        } else if (data.type === 'user_skill_update') {
          fetchSkills();
        } else if (data.type === 'user_update') {
          fetchUser();
        }
      }
    });
  });
</script>
